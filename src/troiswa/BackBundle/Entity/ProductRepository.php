<?php

namespace troiswa\BackBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    public function findProductByQuantity($qty=null,$order=null)
    {
        $query=$this->createQueryBuilder("prod");

        if($qty!=null)
        {
            if($order!=null)
            {
                $query->where("prod.quantity>=:qtyval");
            }
            else
            {
                $query->where("prod.quantity<=:qtyval");

            }
            $query->setParameter("qtyval",$qty);

        }
    return $query->getQuery()->getResult();
    }
    public function countZero()
    {
        $query=$this->createQueryBuilder("prod")
        ->select('count(prod)')
        ->where("prod.quantity=0");

        return $query->getQuery()->getSingleScalarResult();


    }
    public function countActiveProduct()
    {
        $query=$this->createQueryBuilder("prod")
            ->select('count(prod)')
            ->where("prod.active=1");

        return $query->getQuery()->getSingleScalarResult();


    }
    public function countBothActiveProduct()
    {
        // getEntityManager -> je demarre de zero
        $query=$this->getEntityManager()->createQueryBuilder()
            ->select('count(prod.active) as nb, prod.active')
            ->from('troiswaBackBundle:Product', 'prod')
            ->groupBy("prod.active");

        return $query->getQuery()->getResult();


    }
    public function findProductBetweenPrice($min,$max)
    {
        // getEntityManager -> je demarre de zero
        $query=$this->createQueryBuilder('prod')
            ->where("prod.price >=10 and prod.price <=20");

        return $query->getQuery()->getResult();


    }

}
